{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["users","id","name","todos","userId","title","completed","UserInfo","user","className","TodoInfo","todo","handleChecked","type","checked","onChange","classNames","item__status__completed","TodoList","preparedTodos","map","todosFromServer","find","App","state","userName","inputError","selectError","addTodo","currentUser","createdTodo","length","setState","clearForm","setUser","event","value","target","validateSubmit","handleSubmit","preventDefault","handleChange","addedTodo","this","action","onSubmit","htmlFor","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85cf48be.chunk.js","sourcesContent":["const users = [\n  {\n    id: 1,\n    name: 'Джейми Ланнистер',\n  },\n  {\n    id: 2,\n    name: 'Арья Старк',\n  },\n  {\n    id: 3,\n    name: 'Джон Сноу',\n  },\n  {\n    id: 4,\n    name: 'Серый червь',\n  },\n  {\n    id: 5,\n    name: 'Дейенерис Таргариен',\n  },\n  {\n    id: 6,\n    name: 'Тирион Ланнистер',\n  },\n  {\n    id: 7,\n    name: 'Григор Клиган',\n  },\n  {\n    id: 8,\n    name: 'Бранн Старк',\n  },\n  {\n    id: 9,\n    name: 'Серсея Ланнистер',\n  },\n];\n\nexport default users;\n","/* eslint-disable max-len */\n\nconst todos = [\n  {\n    userId: 2,\n    id: 1,\n    title: 'Купить Якен Хгару крем для лица',\n    completed: false,\n  },\n  {\n    userId: 8,\n    id: 2,\n    title: 'Покататься на санках',\n    completed: true,\n  },\n  {\n    userId: 3,\n    id: 3,\n    title: 'Узнать хоть что-то',\n    completed: false,\n  },\n];\n\nexport default todos;\n","import React from 'react';\nimport { User } from '../../types/user';\nimport './UserInfo.scss';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <div className=\"user\">\n      <div className=\"user__name\">{user.name}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n// import { UserInfo } from '../UserInfo/UserInfo';\n\nimport { Todo } from '../../types/todo';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport './TodoInfo.scss';\n\ntype Props = {\n  todo: Todo;\n  handleChecked: (id:number) => void\n};\n\nexport const TodoInfo:React.FC<Props> = ({ todo, handleChecked }) => {\n  return (\n    <>\n      <div className=\"item__info\">\n        {todo.user && <UserInfo user={todo.user} />}\n        <div className=\"item__title\">{todo.title}</div>\n        <input\n          className=\"item__checkbox\"\n          type=\"checkbox\"\n          checked={todo.completed}\n          onChange={() => handleChecked(todo.id)}\n        />\n        <div className={classNames(\n          'item__status',\n          { item__status__completed: todo.completed },\n        )}\n        >\n          {todo.completed ? ('Сделано') : ('Не сделано')}\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\nimport './TodoList.scss';\n\ntype Props = {\n  preparedTodos: Todo[],\n  handleChecked: (id:number) => void\n};\n\nexport const TodoList: React.FC<Props> = ({ preparedTodos, handleChecked }) => {\n  return (\n    <div className=\"TodoList__container\">\n      <ul className=\"TodoList\">\n        {preparedTodos.map(todo => (\n          <li key={todo.id} className=\"TodoList__item\">\n            <TodoInfo todo={todo} handleChecked={handleChecked} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\n\nimport users from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { Todo } from './types/todo';\nimport { User } from './types/user';\n\nconst preparedTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: users.find(user => user.id === todo.userId) || null,\n}));\n\ntype State = {\n  todos: Todo[];\n  userName: string;\n  title: string,\n  inputError: boolean,\n  selectError: boolean,\n};\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    todos: [...preparedTodos],\n    userName: '',\n    title: '',\n    inputError: false,\n    selectError: false,\n  };\n\n  addTodo = () => {\n    const currentUser: User | null = users.find(\n      user => (user.name === this.state.userName),\n    ) || null;\n\n    if (currentUser === null) {\n      return;\n    }\n\n    const createdTodo: Todo = {\n      userId: currentUser.id,\n      title: this.state.title,\n      id: this.state.todos.length + 1,\n      user: currentUser,\n      completed: false,\n    };\n\n    this.setState((state) => ({\n      todos: [...state.todos, createdTodo],\n    }));\n  };\n\n  clearForm = () => {\n    this.setState({\n      title: '',\n      userName: '',\n    });\n  };\n\n  setUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      userName: value,\n      selectError: false,\n    });\n  };\n\n  validateSubmit = () => {\n    const { title, userName } = this.state;\n\n    this.setState({\n      inputError: title === '',\n      selectError: userName === '',\n    });\n\n    return title && userName;\n  };\n\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!this.validateSubmit()) {\n      return;\n    }\n\n    this.addTodo();\n    this.clearForm();\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      title: event.target.value,\n      inputError: false,\n    });\n  };\n\n  handleChecked = (id:number) => {\n    const addedTodo = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    });\n\n    this.setState(() => ({\n      todos: addedTodo,\n    }));\n  };\n\n  render() {\n    const {\n      todos, selectError, inputError, userName, title,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__container\">\n          <form\n            className=\"todo__form\"\n            action=\"get\"\n            onSubmit={this.handleSubmit}\n          >\n            <div className=\"todo__content\">\n              Что прикажете?\n              <div className=\"todo__inputBlock\">\n                <input\n                  type=\"text\"\n                  className=\"todo__inputTitle\"\n                  value={title}\n                  onChange={this.handleChange}\n                />\n                {inputError && (\n                  <div className=\"error\">\n                    Нужно какое-то поручение\n                  </div>\n                )}\n              </div>\n              <div className=\"todo__selectBlock\">\n                <label htmlFor=\"userSelect\">\n                  <select\n                    className=\"todo__select\"\n                    name=\"user\"\n                    id=\"userSelect\"\n                    value={userName}\n                    onChange={this.setUser}\n                  >\n                    <option value=\"\">Выберите исполнителя</option>\n                    {users.map((user) => (\n                      <option key={user.id} value={user.name}>{user.name}</option>\n                    ))}\n                  </select>\n                </label>\n                {selectError && (\n                  <div className=\"error\">\n                    Кому поручить?\n                  </div>\n                )}\n              </div>\n            </div>\n            <button\n              className=\"todo__button\"\n              type=\"submit\"\n            >\n              Отправить на задание\n            </button>\n          </form>\n        </div>\n        <TodoList\n          preparedTodos={todos}\n          handleChecked={this.handleChecked}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}